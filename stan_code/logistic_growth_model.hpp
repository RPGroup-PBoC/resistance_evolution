
// Code generated by stanc v2.25.0
#include <stan/model/model_header.hpp>
namespace logistic_growth_model_model_namespace {


inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}

inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}


using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 

static int current_statement__ = 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/fit_seq/stan_code/logistic_growth_model.stan', line 31, column 4 to column 21)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/fit_seq/stan_code/logistic_growth_model.stan', line 33, column 4 to column 20)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/fit_seq/stan_code/logistic_growth_model.stan', line 35, column 4 to column 23)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/fit_seq/stan_code/logistic_growth_model.stan', line 37, column 4 to column 24)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/fit_seq/stan_code/logistic_growth_model.stan', line 41, column 3 to column 31)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/fit_seq/stan_code/logistic_growth_model.stan', line 61, column 4 to column 26)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/fit_seq/stan_code/logistic_growth_model.stan', line 63, column 8 to column 84)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/fit_seq/stan_code/logistic_growth_model.stan', line 62, column 22 to line 64, column 5)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/fit_seq/stan_code/logistic_growth_model.stan', line 62, column 4 to line 64, column 5)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/fit_seq/stan_code/logistic_growth_model.stan', line 46, column 4 to column 31)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/fit_seq/stan_code/logistic_growth_model.stan', line 47, column 4 to column 27)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/fit_seq/stan_code/logistic_growth_model.stan', line 48, column 4 to column 35)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/fit_seq/stan_code/logistic_growth_model.stan', line 49, column 4 to column 57)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/fit_seq/stan_code/logistic_growth_model.stan', line 52, column 16 to column 17)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/fit_seq/stan_code/logistic_growth_model.stan', line 52, column 4 to column 19)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/fit_seq/stan_code/logistic_growth_model.stan', line 54, column 8 to column 58)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/fit_seq/stan_code/logistic_growth_model.stan', line 55, column 8 to column 40)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/fit_seq/stan_code/logistic_growth_model.stan', line 53, column 18 to line 56, column 5)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/fit_seq/stan_code/logistic_growth_model.stan', line 53, column 4 to line 56, column 5)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/fit_seq/stan_code/logistic_growth_model.stan', line 12, column 4 to column 10)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/fit_seq/stan_code/logistic_growth_model.stan', line 14, column 11 to column 12)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/fit_seq/stan_code/logistic_growth_model.stan', line 14, column 4 to column 14)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/fit_seq/stan_code/logistic_growth_model.stan', line 16, column 11 to column 12)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/fit_seq/stan_code/logistic_growth_model.stan', line 16, column 4 to column 14)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/fit_seq/stan_code/logistic_growth_model.stan', line 18, column 4 to column 19)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/fit_seq/stan_code/logistic_growth_model.stan', line 19, column 4 to column 17)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/fit_seq/stan_code/logistic_growth_model.stan', line 20, column 4 to column 21)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/fit_seq/stan_code/logistic_growth_model.stan', line 21, column 4 to column 23)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/fit_seq/stan_code/logistic_growth_model.stan', line 22, column 4 to column 26)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/fit_seq/stan_code/logistic_growth_model.stan', line 24, column 4 to column 14)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/fit_seq/stan_code/logistic_growth_model.stan', line 26, column 15 to column 20)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/fit_seq/stan_code/logistic_growth_model.stan', line 26, column 4 to column 22)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/fit_seq/stan_code/logistic_growth_model.stan', line 61, column 19 to column 24)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/fit_seq/stan_code/logistic_growth_model.stan', line 3, column 8 to column 45)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/fit_seq/stan_code/logistic_growth_model.stan', line 4, column 8 to column 53)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/fit_seq/stan_code/logistic_growth_model.stan', line 5, column 8 to column 27)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/fit_seq/stan_code/logistic_growth_model.stan', line 2, column 63 to line 6, column 5)"};


template <typename T0__, typename T1__, typename T2__, typename T3__>
stan::promote_args_t<T0__, T1__, T2__,
T3__>
logistic_growth(const T0__& t, const T1__& K, const T2__& lambda,
                const T3__& y_0, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ num;
    num = DUMMY_VAR__;
    
    current_statement__ = 34;
    num = ((K * y_0) * stan::math::exp((lambda * t)));
    local_scalar_t__ denom;
    denom = DUMMY_VAR__;
    
    current_statement__ = 35;
    denom = (K + (y_0 * (stan::math::exp((lambda * t)) - 1)));
    current_statement__ = 36;
    return (num / denom);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct logistic_growth_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
stan::promote_args_t<T0__, T1__, T2__,
T3__>
operator()(const T0__& t, const T1__& K, const T2__& lambda, const T3__& y_0,
           std::ostream* pstream__)  const 
{
return logistic_growth(t, K, lambda, y_0, pstream__);
}
};

class logistic_growth_model_model final : public model_base_crtp<logistic_growth_model_model> {

 private:
  int N;
  std::vector<double> t;
  std::vector<double> y;
  double y_0_sigma;
  double K_sigma;
  double sigma_sigma;
  double log_lambda_mu;
  double log_lambda_sigma;
  int N_ppc;
  std::vector<double> t_ppc;
 
 public:
  ~logistic_growth_model_model() final { }
  
  std::string model_name() const final { return "logistic_growth_model_model"; }

  std::vector<std::string> model_compile_info() const {
    std::vector<std::string> stanc_info;
    stanc_info.push_back("stanc_version = stanc3 v2.25.0");
    stanc_info.push_back("stancflags = ");
    return stanc_info;
  }
  
  
  logistic_growth_model_model(stan::io::var_context& context__,
                              unsigned int random_seed__ = 0,
                              std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "logistic_growth_model_model_namespace::logistic_growth_model_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 20;
      context__.validate_dims("data initialization","N","int",
          context__.to_vec());
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 20;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 21;
      validate_non_negative_index("t", "N", N);
      current_statement__ = 22;
      context__.validate_dims("data initialization","t","double",
          context__.to_vec(N));
      t = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 22;
      assign(t, nil_index_list(), context__.vals_r("t"),
        "assigning variable t");
      current_statement__ = 23;
      validate_non_negative_index("y", "N", N);
      current_statement__ = 24;
      context__.validate_dims("data initialization","y","double",
          context__.to_vec(N));
      y = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 24;
      assign(y, nil_index_list(), context__.vals_r("y"),
        "assigning variable y");
      current_statement__ = 25;
      context__.validate_dims("data initialization","y_0_sigma","double",
          context__.to_vec());
      y_0_sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 25;
      y_0_sigma = context__.vals_r("y_0_sigma")[(1 - 1)];
      current_statement__ = 26;
      context__.validate_dims("data initialization","K_sigma","double",
          context__.to_vec());
      K_sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 26;
      K_sigma = context__.vals_r("K_sigma")[(1 - 1)];
      current_statement__ = 27;
      context__.validate_dims("data initialization","sigma_sigma","double",
          context__.to_vec());
      sigma_sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 27;
      sigma_sigma = context__.vals_r("sigma_sigma")[(1 - 1)];
      current_statement__ = 28;
      context__.validate_dims("data initialization","log_lambda_mu","double",
          context__.to_vec());
      log_lambda_mu = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 28;
      log_lambda_mu = context__.vals_r("log_lambda_mu")[(1 - 1)];
      current_statement__ = 29;
      context__.validate_dims("data initialization","log_lambda_sigma",
          "double",context__.to_vec());
      log_lambda_sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 29;
      log_lambda_sigma = context__.vals_r("log_lambda_sigma")[(1 - 1)];
      current_statement__ = 30;
      context__.validate_dims("data initialization","N_ppc","int",
          context__.to_vec());
      N_ppc = std::numeric_limits<int>::min();
      
      current_statement__ = 30;
      N_ppc = context__.vals_i("N_ppc")[(1 - 1)];
      current_statement__ = 31;
      validate_non_negative_index("t_ppc", "N_ppc", N_ppc);
      current_statement__ = 32;
      context__.validate_dims("data initialization","t_ppc","double",
          context__.to_vec(N_ppc));
      t_ppc = std::vector<double>(N_ppc, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 32;
      assign(t_ppc, nil_index_list(), context__.vals_r("t_ppc"),
        "assigning variable t_ppc");
      current_statement__ = 33;
      validate_non_negative_index("y_predict", "N_ppc", N_ppc);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename T__>
  inline T__ log_prob(std::vector<T__>& params_r__,
                      std::vector<int>& params_i__,
                      std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "logistic_growth_model_model_namespace::log_prob";
(void) function__;  // suppress unused var warning

    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      local_scalar_t__ K;
      K = DUMMY_VAR__;
      
      current_statement__ = 1;
      K = in__.scalar();
      current_statement__ = 1;
      if (jacobian__) {
        current_statement__ = 1;
        K = stan::math::lb_constrain(K, 0, lp__);
      } else {
        current_statement__ = 1;
        K = stan::math::lb_constrain(K, 0);
      }
      local_scalar_t__ log_lambda;
      log_lambda = DUMMY_VAR__;
      
      current_statement__ = 2;
      log_lambda = in__.scalar();
      local_scalar_t__ y_0;
      y_0 = DUMMY_VAR__;
      
      current_statement__ = 3;
      y_0 = in__.scalar();
      current_statement__ = 3;
      if (jacobian__) {
        current_statement__ = 3;
        y_0 = stan::math::lb_constrain(y_0, 0, lp__);
      } else {
        current_statement__ = 3;
        y_0 = stan::math::lb_constrain(y_0, 0);
      }
      local_scalar_t__ sigma;
      sigma = DUMMY_VAR__;
      
      current_statement__ = 4;
      sigma = in__.scalar();
      current_statement__ = 4;
      if (jacobian__) {
        current_statement__ = 4;
        sigma = stan::math::lb_constrain(sigma, 0, lp__);
      } else {
        current_statement__ = 4;
        sigma = stan::math::lb_constrain(sigma, 0);
      }
      local_scalar_t__ lambda;
      lambda = DUMMY_VAR__;
      
      current_statement__ = 5;
      lambda = pow(10, log_lambda);
      {
        current_statement__ = 10;
        lp_accum__.add(normal_lpdf<propto__>(y_0, 0, y_0_sigma));
        current_statement__ = 11;
        lp_accum__.add(normal_lpdf<propto__>(K, 0, K_sigma));
        current_statement__ = 12;
        lp_accum__.add(normal_lpdf<propto__>(sigma, 0, sigma_sigma));
        current_statement__ = 13;
        lp_accum__.add(
          normal_lpdf<propto__>(log_lambda, log_lambda_mu, log_lambda_sigma));
        current_statement__ = 14;
        validate_non_negative_index("y_theo", "N", N);
        std::vector<local_scalar_t__> y_theo;
        y_theo = std::vector<local_scalar_t__>(N, DUMMY_VAR__);
        
        current_statement__ = 19;
        for (int i = 1; i <= N; ++i) {
          current_statement__ = 16;
          assign(y_theo, cons_list(index_uni(i), nil_index_list()),
            logistic_growth(t[(i - 1)], K, lambda, y_0, pstream__),
            "assigning variable y_theo");
          current_statement__ = 17;
          lp_accum__.add(
            normal_lpdf<propto__>(y[(i - 1)], y_theo[(i - 1)], sigma));}
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob() 
    
  template <typename RNG>
  inline void write_array(RNG& base_rng__, std::vector<double>& params_r__,
                          std::vector<int>& params_i__,
                          std::vector<double>& vars__,
                          bool emit_transformed_parameters__ = true,
                          bool emit_generated_quantities__ = true,
                          std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "logistic_growth_model_model_namespace::write_array";
(void) function__;  // suppress unused var warning

    (void) function__;  // suppress unused var warning

    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      double K;
      K = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      K = in__.scalar();
      current_statement__ = 1;
      K = stan::math::lb_constrain(K, 0);
      double log_lambda;
      log_lambda = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      log_lambda = in__.scalar();
      double y_0;
      y_0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      y_0 = in__.scalar();
      current_statement__ = 3;
      y_0 = stan::math::lb_constrain(y_0, 0);
      double sigma;
      sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      sigma = in__.scalar();
      current_statement__ = 4;
      sigma = stan::math::lb_constrain(sigma, 0);
      double lambda;
      lambda = std::numeric_limits<double>::quiet_NaN();
      
      vars__.emplace_back(K);
      vars__.emplace_back(log_lambda);
      vars__.emplace_back(y_0);
      vars__.emplace_back(sigma);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 5;
      lambda = pow(10, log_lambda);
      if (emit_transformed_parameters__) {
        vars__.emplace_back(lambda);
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      std::vector<double> y_predict;
      y_predict = std::vector<double>(N_ppc, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 9;
      for (int i = 1; i <= N_ppc; ++i) {
        current_statement__ = 7;
        assign(y_predict, cons_list(index_uni(i), nil_index_list()),
          normal_rng(
            logistic_growth(t_ppc[(i - 1)], K, lambda, y_0, pstream__),
            sigma, base_rng__), "assigning variable y_predict");}
      for (int sym1__ = 1; sym1__ <= N_ppc; ++sym1__) {
        vars__.emplace_back(y_predict[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array() 
    
  inline void transform_inits(const stan::io::var_context& context__,
                              std::vector<int>& params_i__,
                              std::vector<double>& vars__,
                              std::ostream* pstream__) const
    final {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double K;
      K = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      K = context__.vals_r("K")[(1 - 1)];
      double K_free__;
      K_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      K_free__ = stan::math::lb_free(K, 0);
      double log_lambda;
      log_lambda = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      log_lambda = context__.vals_r("log_lambda")[(1 - 1)];
      double y_0;
      y_0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      y_0 = context__.vals_r("y_0")[(1 - 1)];
      double y_0_free__;
      y_0_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      y_0_free__ = stan::math::lb_free(y_0, 0);
      double sigma;
      sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      sigma = context__.vals_r("sigma")[(1 - 1)];
      double sigma_free__;
      sigma_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      sigma_free__ = stan::math::lb_free(sigma, 0);
      vars__.emplace_back(K_free__);
      vars__.emplace_back(log_lambda);
      vars__.emplace_back(y_0_free__);
      vars__.emplace_back(sigma_free__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("K");
    names__.emplace_back("log_lambda");
    names__.emplace_back("y_0");
    names__.emplace_back("sigma");
    names__.emplace_back("lambda");
    names__.emplace_back("y_predict");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const
    final {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N_ppc)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "K");
    param_names__.emplace_back(std::string() + "log_lambda");
    param_names__.emplace_back(std::string() + "y_0");
    param_names__.emplace_back(std::string() + "sigma");
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "lambda");
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N_ppc; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_predict" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "K");
    param_names__.emplace_back(std::string() + "log_lambda");
    param_names__.emplace_back(std::string() + "y_0");
    param_names__.emplace_back(std::string() + "sigma");
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "lambda");
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N_ppc; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_predict" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"K\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"log_lambda\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y_0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"lambda\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"y_predict\",\"type\":{\"name\":\"array\",\"length\":" << N_ppc << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"K\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"log_lambda\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y_0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"lambda\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"y_predict\",\"type\":{\"name\":\"array\",\"length\":" << N_ppc << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng__,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool emit_transformed_parameters__ = true,
                     bool emit_generated_quantities__ = true,
                     std::ostream* pstream = nullptr) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng__, params_r_vec, params_i_vec, vars_vec,
          emit_transformed_parameters__, emit_generated_quantities__, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = nullptr) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto__,jacobian__,T_>(vec_params_r, vec_params_i, pstream);
    }

    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__ = nullptr) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }

};
}

using stan_model = logistic_growth_model_model_namespace::logistic_growth_model_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

#endif


