
// Code generated by stanc v2.29.2
#include <stan/model/model_header.hpp>
namespace gp_growth_rate_prior_deriv_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 123> locations_array__ = 
{" (found before start of program)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 124, column 4 to column 22)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 125, column 4 to column 24)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 126, column 4 to column 24)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 149, column 4 to line 151, column 6)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 153, column 4 to column 32)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 154, column 4 to column 33)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 155, column 4 to column 36)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 157, column 8 to column 55)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 158, column 8 to column 68)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 159, column 8 to column 50)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 156, column 27 to line 160, column 5)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 156, column 4 to line 160, column 5)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 131, column 4 to column 51)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 132, column 4 to column 51)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 133, column 4 to column 45)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 136, column 11 to column 12)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 136, column 14 to column 15)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 136, column 4 to line 137, column 65)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 140, column 11 to column 12)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 140, column 14 to column 15)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 140, column 4 to column 49)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 144, column 4 to column 55)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 109, column 4 to column 19)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 110, column 11 to column 12)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 110, column 4 to column 14)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 111, column 11 to column 12)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 111, column 4 to column 16)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 114, column 4 to column 27)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 115, column 19 to column 28)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 115, column 4 to column 30)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 118, column 4 to column 24)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 119, column 4 to column 24)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 120, column 4 to column 22)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 149, column 11 to column 24)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 153, column 11 to column 20)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 154, column 11 to column 20)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 155, column 11 to column 20)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 13, column 4 to column 25)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 14, column 4 to column 28)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 15, column 11 to column 16)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 15, column 4 to column 27)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 20, column 11 to column 16)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 20, column 18 to column 23)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 20, column 4 to column 67)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 23, column 11 to column 16)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 23, column 18 to column 23)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 23, column 4 to column 37)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 24, column 11 to column 16)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 24, column 18 to column 23)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 24, column 4 to column 37)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 26, column 11 to column 16)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 26, column 18 to column 23)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 26, column 4 to column 38)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 31, column 12 to line 32, column 45)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 33, column 12 to line 34, column 45)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 35, column 12 to line 36, column 66)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 30, column 26 to line 37, column 9)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 30, column 8 to line 37, column 9)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 29, column 22 to line 38, column 5)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 29, column 4 to line 38, column 5)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 40, column 11 to column 16)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 40, column 18 to column 27)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 40, column 4 to column 38)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 41, column 11 to column 16)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 41, column 18 to column 27)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 41, column 4 to column 41)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 42, column 11 to column 20)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 42, column 22 to column 31)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 42, column 4 to column 38)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 44, column 4 to column 49)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 45, column 4 to column 56)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 48, column 4 to column 45)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 52, column 11 to column 17)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 52, column 19 to column 24)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 52, column 4 to column 75)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 53, column 11 to column 16)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 53, column 18 to column 24)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 53, column 4 to column 75)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 55, column 11 to column 17)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 55, column 19 to column 24)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 55, column 4 to column 37)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 56, column 11 to column 16)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 56, column 18 to column 24)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 56, column 4 to column 37)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 61, column 12 to line 62, column 43)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 63, column 12 to line 64, column 43)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 60, column 27 to line 66, column 9)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 60, column 8 to line 66, column 9)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 59, column 24 to line 67, column 5)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 59, column 4 to line 67, column 5)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 69, column 11 to column 17)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 69, column 19 to column 28)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 69, column 4 to column 35)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 70, column 11 to column 20)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 70, column 22 to column 28)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 70, column 4 to column 35)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 72, column 4 to column 42)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 73, column 4 to column 42)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 77, column 11 to column 17)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 77, column 19 to column 25)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 77, column 4 to line 78, column 79)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 80, column 11 to column 17)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 80, column 19 to column 25)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 80, column 4 to column 61)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 83, column 11 to column 17)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 83, column 4 to column 54)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 86, column 11 to column 17)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 86, column 4 to column 57)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 89, column 11 to column 20)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 89, column 4 to column 50)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 92, column 11 to column 17)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 92, column 19 to column 28)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 92, column 4 to column 68)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 94, column 11 to column 20)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 94, column 22 to column 28)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 94, column 4 to column 76)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 97, column 11 to column 20)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 97, column 22 to column 31)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 97, column 4 to line 98, column 78)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 101, column 4 to column 67)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 103, column 4 to column 20)",
 " (in '/Users/tomroeschinger/git/fit_seq/fit_seq/stan_code/gp_growth_rate_prior_deriv.stan', line 11, column 6 to line 104, column 5)"};

struct gp_ppc_rng_functor__ {
  template <typename T0__, typename T1__, typename T2__, typename T3__,
            typename T4__, typename T5__, typename T6__, typename RNG,
            stan::require_stan_scalar_t<T0__>* = nullptr,
            stan::require_col_vector_t<T1__>* = nullptr,
            stan::require_stan_scalar_t<T2__>* = nullptr,
            stan::require_stan_scalar_t<T3__>* = nullptr,
            stan::require_stan_scalar_t<T4__>* = nullptr,
            stan::require_stan_scalar_t<T5__>* = nullptr,
            stan::require_stan_scalar_t<T6__>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<T0__, stan::value_type_t<T1__>, T2__, T3__, T4__,
                       stan::promote_args_t<T5__, T6__>>, -1, 1>
  operator()(const std::vector<T0__>& x_ppc, const T1__& y,
             const std::vector<T2__>& x_data, const T3__& alpha,
             const T4__& rho, const T5__& sigma, const T6__& delta,
             RNG& base_rng__, std::ostream* pstream__) const;
};

template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__, typename T6__, typename RNG,
          stan::require_stan_scalar_t<T0__>* = nullptr,
          stan::require_col_vector_t<T1__>* = nullptr,
          stan::require_stan_scalar_t<T2__>* = nullptr,
          stan::require_stan_scalar_t<T3__>* = nullptr,
          stan::require_stan_scalar_t<T4__>* = nullptr,
          stan::require_stan_scalar_t<T5__>* = nullptr,
          stan::require_stan_scalar_t<T6__>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<T0__, stan::value_type_t<T1__>, T2__, T3__, T4__,
                     stan::promote_args_t<T5__, T6__>>, -1, 1>
  gp_ppc_rng(const std::vector<T0__>& x_ppc, const T1__& y_arg__,
             const std::vector<T2__>& x_data, const T3__& alpha,
             const T4__& rho, const T5__& sigma, const T6__& delta,
             RNG& base_rng__, std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<T0__, stan::value_type_t<T1__>, T2__, T3__,
                                 T4__, stan::promote_args_t<T5__, T6__>>;
    int current_statement__ = 0; 
    const auto& y = stan::math::to_ref(y_arg__);
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int N_data = std::numeric_limits<int>::min();
      current_statement__ = 38;
      N_data = stan::math::rows(y);
      int N_ppc = std::numeric_limits<int>::min();
      current_statement__ = 39;
      N_ppc = stan::math::size(x_ppc);
      current_statement__ = 40;
      stan::math::validate_non_negative_index("f_df_ppc", "N_ppc", N_ppc);
      Eigen::Matrix<local_scalar_t__, -1, 1> f_df_ppc =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N_ppc, DUMMY_VAR__);
      current_statement__ = 42;
      stan::math::validate_non_negative_index("K_xs_xs", "N_ppc", N_ppc);
      current_statement__ = 43;
      stan::math::validate_non_negative_index("K_xs_xs", "N_ppc", N_ppc);
      Eigen::Matrix<local_scalar_t__, -1, -1> K_xs_xs =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(N_ppc, N_ppc,
           DUMMY_VAR__);
      current_statement__ = 44;
      stan::model::assign(K_xs_xs,
        stan::math::cov_exp_quad(x_ppc, alpha, rho),
        "assigning variable K_xs_xs");
      current_statement__ = 45;
      stan::math::validate_non_negative_index("d1x_K_xs_xs", "N_ppc", N_ppc);
      current_statement__ = 46;
      stan::math::validate_non_negative_index("d1x_K_xs_xs", "N_ppc", N_ppc);
      Eigen::Matrix<local_scalar_t__, -1, -1> d1x_K_xs_xs =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(N_ppc, N_ppc,
           DUMMY_VAR__);
      current_statement__ = 48;
      stan::math::validate_non_negative_index("d2x_K_xs_xs", "N_ppc", N_ppc);
      current_statement__ = 49;
      stan::math::validate_non_negative_index("d2x_K_xs_xs", "N_ppc", N_ppc);
      Eigen::Matrix<local_scalar_t__, -1, -1> d2x_K_xs_xs =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(N_ppc, N_ppc,
           DUMMY_VAR__);
      current_statement__ = 51;
      stan::math::validate_non_negative_index("d2xx_K_xs_xs", "N_ppc", N_ppc);
      current_statement__ = 52;
      stan::math::validate_non_negative_index("d2xx_K_xs_xs", "N_ppc", N_ppc);
      Eigen::Matrix<local_scalar_t__, -1, -1> d2xx_K_xs_xs =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(N_ppc, N_ppc,
           DUMMY_VAR__);
      current_statement__ = 60;
      for (int i = 1; i <= N_ppc; ++i) {
        current_statement__ = 58;
        for (int j = 1; j <= N_ppc; ++j) {
          current_statement__ = 54;
          stan::model::assign(d1x_K_xs_xs,
            (((-1 / stan::math::pow(rho, 2)) *
               (stan::model::rvalue(x_ppc, "x_ppc",
                  stan::model::index_uni(i)) -
                 stan::model::rvalue(x_ppc, "x_ppc",
                   stan::model::index_uni(j)))) *
              stan::model::rvalue(K_xs_xs, "K_xs_xs",
                stan::model::index_uni(i), stan::model::index_uni(j))),
            "assigning variable d1x_K_xs_xs", stan::model::index_uni(i),
                                                stan::model::index_uni(j));
          current_statement__ = 55;
          stan::model::assign(d2x_K_xs_xs,
            (((1 / stan::math::pow(rho, 2)) *
               (stan::model::rvalue(x_ppc, "x_ppc",
                  stan::model::index_uni(i)) -
                 stan::model::rvalue(x_ppc, "x_ppc",
                   stan::model::index_uni(j)))) *
              stan::model::rvalue(K_xs_xs, "K_xs_xs",
                stan::model::index_uni(i), stan::model::index_uni(j))),
            "assigning variable d2x_K_xs_xs", stan::model::index_uni(i),
                                                stan::model::index_uni(j));
          current_statement__ = 56;
          stan::model::assign(d2xx_K_xs_xs,
            (((1 / stan::math::pow(rho, 2)) *
               (1 -
                 (stan::math::pow(
                    (stan::model::rvalue(x_ppc, "x_ppc",
                       stan::model::index_uni(i)) -
                      stan::model::rvalue(x_ppc, "x_ppc",
                        stan::model::index_uni(j))), 2) /
                   stan::math::pow(rho, 2)))) *
              stan::model::rvalue(K_xs_xs, "K_xs_xs",
                stan::model::index_uni(i), stan::model::index_uni(j))),
            "assigning variable d2xx_K_xs_xs", stan::model::index_uni(i),
                                                 stan::model::index_uni(j));
        }
      }
      current_statement__ = 61;
      stan::math::validate_non_negative_index("K_22_top", "N_ppc", N_ppc);
      current_statement__ = 62;
      stan::math::validate_non_negative_index("K_22_top", "2 * N_ppc",
                                              (2 * N_ppc));
      Eigen::Matrix<local_scalar_t__, -1, -1> K_22_top =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(N_ppc,
           (2 * N_ppc), DUMMY_VAR__);
      current_statement__ = 64;
      stan::math::validate_non_negative_index("K_22_bottom", "N_ppc", N_ppc);
      current_statement__ = 65;
      stan::math::validate_non_negative_index("K_22_bottom", "2 * N_ppc",
                                              (2 * N_ppc));
      Eigen::Matrix<local_scalar_t__, -1, -1> K_22_bottom =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(N_ppc,
           (2 * N_ppc), DUMMY_VAR__);
      current_statement__ = 67;
      stan::math::validate_non_negative_index("K_22", "2 * N_ppc",
                                              (2 * N_ppc));
      current_statement__ = 68;
      stan::math::validate_non_negative_index("K_22", "2 * N_ppc",
                                              (2 * N_ppc));
      Eigen::Matrix<local_scalar_t__, -1, -1> K_22 =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant((2 * N_ppc),
           (2 * N_ppc), DUMMY_VAR__);
      current_statement__ = 70;
      stan::model::assign(K_22_top,
        stan::math::append_col(K_xs_xs, stan::math::transpose(d1x_K_xs_xs)),
        "assigning variable K_22_top");
      current_statement__ = 71;
      stan::model::assign(K_22_bottom,
        stan::math::append_col(d1x_K_xs_xs, d2xx_K_xs_xs),
        "assigning variable K_22_bottom");
      current_statement__ = 72;
      stan::model::assign(K_22,
        stan::math::append_row(K_22_top, K_22_bottom),
        "assigning variable K_22");
      current_statement__ = 73;
      stan::math::validate_non_negative_index("K_x_xs", "N_data", N_data);
      current_statement__ = 74;
      stan::math::validate_non_negative_index("K_x_xs", "N_ppc", N_ppc);
      Eigen::Matrix<local_scalar_t__, -1, -1> K_x_xs =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(N_data, N_ppc,
           DUMMY_VAR__);
      current_statement__ = 75;
      stan::model::assign(K_x_xs,
        stan::math::cov_exp_quad(x_data, x_ppc, alpha, rho),
        "assigning variable K_x_xs");
      current_statement__ = 76;
      stan::math::validate_non_negative_index("K_xs_x", "N_ppc", N_ppc);
      current_statement__ = 77;
      stan::math::validate_non_negative_index("K_xs_x", "N_data", N_data);
      Eigen::Matrix<local_scalar_t__, -1, -1> K_xs_x =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(N_ppc, N_data,
           DUMMY_VAR__);
      current_statement__ = 78;
      stan::model::assign(K_xs_x,
        stan::math::cov_exp_quad(x_ppc, x_data, alpha, rho),
        "assigning variable K_xs_x");
      current_statement__ = 79;
      stan::math::validate_non_negative_index("d2x_K_x_xs", "N_data", N_data);
      current_statement__ = 80;
      stan::math::validate_non_negative_index("d2x_K_x_xs", "N_ppc", N_ppc);
      Eigen::Matrix<local_scalar_t__, -1, -1> d2x_K_x_xs =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(N_data, N_ppc,
           DUMMY_VAR__);
      current_statement__ = 82;
      stan::math::validate_non_negative_index("d1x_K_xs_x", "N_ppc", N_ppc);
      current_statement__ = 83;
      stan::math::validate_non_negative_index("d1x_K_xs_x", "N_data", N_data);
      Eigen::Matrix<local_scalar_t__, -1, -1> d1x_K_xs_x =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(N_ppc, N_data,
           DUMMY_VAR__);
      current_statement__ = 90;
      for (int i = 1; i <= N_data; ++i) {
        current_statement__ = 88;
        for (int j = 1; j <= N_ppc; ++j) {
          current_statement__ = 85;
          stan::model::assign(d2x_K_x_xs,
            (((1 / stan::math::pow(rho, 2)) *
               (stan::model::rvalue(x_data, "x_data",
                  stan::model::index_uni(i)) -
                 stan::model::rvalue(x_ppc, "x_ppc",
                   stan::model::index_uni(j)))) *
              stan::model::rvalue(K_x_xs, "K_x_xs",
                stan::model::index_uni(i), stan::model::index_uni(j))),
            "assigning variable d2x_K_x_xs", stan::model::index_uni(i),
                                               stan::model::index_uni(j));
          current_statement__ = 86;
          stan::model::assign(d1x_K_xs_x,
            (((-1 / stan::math::pow(rho, 2)) *
               (stan::model::rvalue(x_ppc, "x_ppc",
                  stan::model::index_uni(j)) -
                 stan::model::rvalue(x_data, "x_data",
                   stan::model::index_uni(i)))) *
              stan::model::rvalue(K_xs_x, "K_xs_x",
                stan::model::index_uni(j), stan::model::index_uni(i))),
            "assigning variable d1x_K_xs_x", stan::model::index_uni(j),
                                               stan::model::index_uni(i));
        }
      }
      current_statement__ = 91;
      stan::math::validate_non_negative_index("K_12", "N_data", N_data);
      current_statement__ = 92;
      stan::math::validate_non_negative_index("K_12", "2 * N_ppc",
                                              (2 * N_ppc));
      Eigen::Matrix<local_scalar_t__, -1, -1> K_12 =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(N_data,
           (2 * N_ppc), DUMMY_VAR__);
      current_statement__ = 94;
      stan::math::validate_non_negative_index("K_21", "2 * N_ppc",
                                              (2 * N_ppc));
      current_statement__ = 95;
      stan::math::validate_non_negative_index("K_21", "N_data", N_data);
      Eigen::Matrix<local_scalar_t__, -1, -1> K_21 =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant((2 * N_ppc),
           N_data, DUMMY_VAR__);
      current_statement__ = 97;
      stan::model::assign(K_12, stan::math::append_col(K_x_xs, d2x_K_x_xs),
        "assigning variable K_12");
      current_statement__ = 98;
      stan::model::assign(K_21, stan::math::append_row(K_xs_x, d1x_K_xs_x),
        "assigning variable K_21");
      current_statement__ = 99;
      stan::math::validate_non_negative_index("K_x_x", "N_data", N_data);
      current_statement__ = 100;
      stan::math::validate_non_negative_index("K_x_x", "N_data", N_data);
      Eigen::Matrix<local_scalar_t__, -1, -1> K_x_x =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(N_data, N_data,
           DUMMY_VAR__);
      current_statement__ = 101;
      stan::model::assign(K_x_x,
        stan::math::add(stan::math::cov_exp_quad(x_data, alpha, rho),
          stan::math::diag_matrix(
            stan::math::rep_vector(stan::math::square(sigma), N_data))),
        "assigning variable K_x_x");
      current_statement__ = 102;
      stan::math::validate_non_negative_index("L_x_x", "N_data", N_data);
      current_statement__ = 103;
      stan::math::validate_non_negative_index("L_x_x", "N_data", N_data);
      Eigen::Matrix<local_scalar_t__, -1, -1> L_x_x =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(N_data, N_data,
           DUMMY_VAR__);
      current_statement__ = 104;
      stan::model::assign(L_x_x, stan::math::cholesky_decompose(K_x_x),
        "assigning variable L_x_x");
      current_statement__ = 105;
      stan::math::validate_non_negative_index("b", "N_data", N_data);
      Eigen::Matrix<local_scalar_t__, -1, 1> b =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N_data,
           DUMMY_VAR__);
      current_statement__ = 106;
      stan::model::assign(b, stan::math::mdivide_left_tri_low(L_x_x, y),
        "assigning variable b");
      current_statement__ = 107;
      stan::math::validate_non_negative_index("a", "N_data", N_data);
      Eigen::Matrix<local_scalar_t__, -1, 1> a =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N_data,
           DUMMY_VAR__);
      current_statement__ = 108;
      stan::model::assign(a,
        stan::math::transpose(
          stan::math::mdivide_right_tri_low(stan::math::transpose(b), L_x_x)),
        "assigning variable a");
      current_statement__ = 109;
      stan::math::validate_non_negative_index("mean_conditional",
                                              "2 * N_ppc", (2 * N_ppc));
      Eigen::Matrix<local_scalar_t__, -1, 1> mean_conditional =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant((2 * N_ppc),
           DUMMY_VAR__);
      current_statement__ = 110;
      stan::model::assign(mean_conditional, stan::math::multiply(K_21, a),
        "assigning variable mean_conditional");
      current_statement__ = 111;
      stan::math::validate_non_negative_index("v", "N_data", N_data);
      current_statement__ = 112;
      stan::math::validate_non_negative_index("v", "2 * N_ppc", (2 * N_ppc));
      Eigen::Matrix<local_scalar_t__, -1, -1> v =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(N_data,
           (2 * N_ppc), DUMMY_VAR__);
      current_statement__ = 113;
      stan::model::assign(v, stan::math::mdivide_left_tri_low(L_x_x, K_12),
        "assigning variable v");
      current_statement__ = 114;
      stan::math::validate_non_negative_index("v_prime", "2 * N_ppc",
                                              (2 * N_ppc));
      current_statement__ = 115;
      stan::math::validate_non_negative_index("v_prime", "N_data", N_data);
      Eigen::Matrix<local_scalar_t__, -1, -1> v_prime =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant((2 * N_ppc),
           N_data, DUMMY_VAR__);
      current_statement__ = 116;
      stan::model::assign(v_prime,
        stan::math::transpose(
          stan::math::mdivide_left_tri_low(L_x_x,
            stan::math::transpose(K_21))), "assigning variable v_prime");
      current_statement__ = 117;
      stan::math::validate_non_negative_index("cov_conditional", "2 * N_ppc",
                                              (2 * N_ppc));
      current_statement__ = 118;
      stan::math::validate_non_negative_index("cov_conditional", "2 * N_ppc",
                                              (2 * N_ppc));
      Eigen::Matrix<local_scalar_t__, -1, -1> cov_conditional =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant((2 * N_ppc),
           (2 * N_ppc), DUMMY_VAR__);
      current_statement__ = 119;
      stan::model::assign(cov_conditional,
        stan::math::add(
          stan::math::subtract(K_22, stan::math::multiply(v_prime, v)),
          stan::math::diag_matrix(stan::math::rep_vector(delta, (2 * N_ppc)))),
        "assigning variable cov_conditional");
      current_statement__ = 120;
      stan::model::assign(f_df_ppc,
        stan::math::multi_normal_rng(mean_conditional, cov_conditional,
          base_rng__), "assigning variable f_df_ppc");
      current_statement__ = 121;
      return f_df_ppc;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__, typename T6__, typename RNG,
          stan::require_stan_scalar_t<T0__>*,
          stan::require_col_vector_t<T1__>*,
          stan::require_stan_scalar_t<T2__>*,
          stan::require_stan_scalar_t<T3__>*,
          stan::require_stan_scalar_t<T4__>*,
          stan::require_stan_scalar_t<T5__>*,
          stan::require_stan_scalar_t<T6__>*>
Eigen::Matrix<stan::promote_args_t<T0__, stan::value_type_t<T1__>, T2__, T3__, T4__,
                     stan::promote_args_t<T5__, T6__>>, -1, 1>
gp_ppc_rng_functor__::operator()(const std::vector<T0__>& x_ppc,
                                 const T1__& y,
                                 const std::vector<T2__>& x_data,
                                 const T3__& alpha, const T4__& rho,
                                 const T5__& sigma, const T6__& delta,
                                 RNG& base_rng__, std::ostream* pstream__) 
const
{
  return gp_ppc_rng(x_ppc, y, x_data, alpha, rho, sigma, delta, base_rng__,
           pstream__);
}


class gp_growth_rate_prior_deriv_model final : public model_base_crtp<gp_growth_rate_prior_deriv_model> {

 private:
  int N;
  std::vector<double> t;
  Eigen::Matrix<double, -1, 1> y__;
  int N_predict;
  std::vector<double> t_predict;
  std::vector<double> alpha_param;
  std::vector<double> sigma_param;
  std::vector<double> rho_param;
  int f_predict_1dim__; 
  Eigen::Map<Eigen::Matrix<double, -1, 1>> y{nullptr, 0};
 
 public:
  ~gp_growth_rate_prior_deriv_model() { }
  
  inline std::string model_name() const final { return "gp_growth_rate_prior_deriv_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.29.2", "stancflags = "};
  }
  
  
  gp_growth_rate_prior_deriv_model(stan::io::var_context& context__,
                                   unsigned int random_seed__ = 0,
                                   std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "gp_growth_rate_prior_deriv_model_namespace::gp_growth_rate_prior_deriv_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 23;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      
      
      current_statement__ = 23;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 23;
      stan::math::check_greater_or_equal(function__, "N", N, 1);
      current_statement__ = 24;
      stan::math::validate_non_negative_index("t", "N", N);
      current_statement__ = 25;
      context__.validate_dims("data initialization","t","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      t = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 25;
      t = context__.vals_r("t");
      current_statement__ = 26;
      stan::math::validate_non_negative_index("y", "N", N);
      current_statement__ = 27;
      context__.validate_dims("data initialization","y","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      y__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&y) Eigen::Map<Eigen::Matrix<double, -1, 1>>(y__.data(), N);
      
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 27;
        y_flat__ = context__.vals_r("y");
        current_statement__ = 27;
        pos__ = 1;
        current_statement__ = 27;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 27;
          stan::model::assign(y, y_flat__[(pos__ - 1)],
            "assigning variable y", stan::model::index_uni(sym1__));
          current_statement__ = 27;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 28;
      context__.validate_dims("data initialization","N_predict","int",
           std::vector<size_t>{});
      N_predict = std::numeric_limits<int>::min();
      
      
      current_statement__ = 28;
      N_predict = context__.vals_i("N_predict")[(1 - 1)];
      current_statement__ = 28;
      stan::math::check_greater_or_equal(function__, "N_predict", N_predict,
                                            1);
      current_statement__ = 29;
      stan::math::validate_non_negative_index("t_predict", "N_predict",
                                              N_predict);
      current_statement__ = 30;
      context__.validate_dims("data initialization","t_predict","double",
           std::vector<size_t>{static_cast<size_t>(N_predict)});
      t_predict = 
        std::vector<double>(N_predict, 
          std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 30;
      t_predict = context__.vals_r("t_predict");
      current_statement__ = 31;
      context__.validate_dims("data initialization","alpha_param","double",
           std::vector<size_t>{static_cast<size_t>(2)});
      alpha_param = 
        std::vector<double>(2, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 31;
      alpha_param = context__.vals_r("alpha_param");
      current_statement__ = 32;
      context__.validate_dims("data initialization","sigma_param","double",
           std::vector<size_t>{static_cast<size_t>(2)});
      sigma_param = 
        std::vector<double>(2, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 32;
      sigma_param = context__.vals_r("sigma_param");
      current_statement__ = 33;
      context__.validate_dims("data initialization","rho_param","double",
           std::vector<size_t>{static_cast<size_t>(2)});
      rho_param = 
        std::vector<double>(2, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 33;
      rho_param = context__.vals_r("rho_param");
      current_statement__ = 34;
      f_predict_1dim__ = std::numeric_limits<int>::min();
      
      
      current_statement__ = 34;
      f_predict_1dim__ = (2 * N_predict);
      current_statement__ = 34;
      stan::math::validate_non_negative_index("f_predict", "2 * N_predict",
                                              f_predict_1dim__);
      current_statement__ = 35;
      stan::math::validate_non_negative_index("y_predict", "N_predict",
                                              N_predict);
      current_statement__ = 36;
      stan::math::validate_non_negative_index("dy_predict", "N_predict",
                                              N_predict);
      current_statement__ = 37;
      stan::math::validate_non_negative_index("doubling_time", "N_predict",
                                              N_predict);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "gp_growth_rate_prior_deriv_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ rho = DUMMY_VAR__;
      current_statement__ = 1;
      rho = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
              lp__);
      local_scalar_t__ alpha = DUMMY_VAR__;
      current_statement__ = 2;
      alpha = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 3;
      sigma = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      {
        current_statement__ = 13;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(alpha,
            stan::model::rvalue(alpha_param, "alpha_param",
              stan::model::index_uni(1)),
            stan::model::rvalue(alpha_param, "alpha_param",
              stan::model::index_uni(2))));
        current_statement__ = 14;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(sigma,
            stan::model::rvalue(sigma_param, "sigma_param",
              stan::model::index_uni(1)),
            stan::model::rvalue(sigma_param, "sigma_param",
              stan::model::index_uni(2))));
        current_statement__ = 15;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(rho,
            stan::model::rvalue(rho_param, "rho_param",
              stan::model::index_uni(1)),
            stan::model::rvalue(rho_param, "rho_param",
              stan::model::index_uni(2))));
        current_statement__ = 16;
        stan::math::validate_non_negative_index("cov", "N", N);
        current_statement__ = 17;
        stan::math::validate_non_negative_index("cov", "N", N);
        Eigen::Matrix<local_scalar_t__, -1, -1> cov =
           Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(N, N,
             DUMMY_VAR__);
        current_statement__ = 18;
        stan::model::assign(cov,
          stan::math::add(stan::math::cov_exp_quad(t, alpha, rho),
            stan::math::diag_matrix(
              stan::math::rep_vector(stan::math::square(sigma), N))),
          "assigning variable cov");
        current_statement__ = 19;
        stan::math::validate_non_negative_index("L_cov", "N", N);
        current_statement__ = 20;
        stan::math::validate_non_negative_index("L_cov", "N", N);
        Eigen::Matrix<local_scalar_t__, -1, -1> L_cov =
           Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(N, N,
             DUMMY_VAR__);
        current_statement__ = 21;
        stan::model::assign(L_cov, stan::math::cholesky_decompose(cov),
          "assigning variable L_cov");
        current_statement__ = 22;
        lp_accum__.add(
          stan::math::multi_normal_cholesky_lpdf<propto__>(y,
            stan::math::rep_vector(0, N), L_cov));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "gp_growth_rate_prior_deriv_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double rho = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      rho = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
              lp__);
      double alpha = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      alpha = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      double sigma = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      sigma = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      out__.write(rho);
      out__.write(alpha);
      out__.write(sigma);
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      Eigen::Matrix<double, -1, 1> f_predict =
         Eigen::Matrix<double, -1, 1>::Constant(f_predict_1dim__,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      stan::model::assign(f_predict,
        gp_ppc_rng(t_predict, y, t, alpha, rho, sigma,
          1e-10, base_rng__, pstream__), "assigning variable f_predict");
      Eigen::Matrix<double, -1, 1> y_predict =
         Eigen::Matrix<double, -1, 1>::Constant(N_predict,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> dy_predict =
         Eigen::Matrix<double, -1, 1>::Constant(N_predict,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> doubling_time =
         Eigen::Matrix<double, -1, 1>::Constant(N_predict,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 12;
      for (int n = 1; n <= N_predict; ++n) {
        current_statement__ = 8;
        stan::model::assign(y_predict,
          stan::math::normal_rng(
            stan::model::rvalue(f_predict, "f_predict",
              stan::model::index_uni(n)), sigma, base_rng__),
          "assigning variable y_predict", stan::model::index_uni(n));
        current_statement__ = 9;
        stan::model::assign(dy_predict,
          stan::math::normal_rng(
            stan::model::rvalue(f_predict, "f_predict",
              stan::model::index_uni((N_predict + n))), 1e-10, base_rng__),
          "assigning variable dy_predict", stan::model::index_uni(n));
        current_statement__ = 10;
        stan::model::assign(doubling_time,
          (stan::math::log(2) /
            stan::model::rvalue(dy_predict, "dy_predict",
              stan::model::index_uni(n))),
          "assigning variable doubling_time", stan::model::index_uni(n));
      }
      out__.write(f_predict);
      out__.write(y_predict);
      out__.write(dy_predict);
      out__.write(doubling_time);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ rho = DUMMY_VAR__;
      rho = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, rho);
      local_scalar_t__ alpha = DUMMY_VAR__;
      alpha = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, alpha);
      local_scalar_t__ sigma = DUMMY_VAR__;
      sigma = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"rho", "alpha", "sigma", "f_predict",
      "y_predict", "dy_predict", "doubling_time"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{}, std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(f_predict_1dim__)},
      std::vector<size_t>{static_cast<size_t>(N_predict)},
      std::vector<size_t>{static_cast<size_t>(N_predict)},
      std::vector<size_t>{static_cast<size_t>(N_predict)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "rho");
    param_names__.emplace_back(std::string() + "alpha");
    param_names__.emplace_back(std::string() + "sigma");
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= f_predict_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "f_predict" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_predict; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_predict" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_predict; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "dy_predict" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_predict; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "doubling_time" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "rho");
    param_names__.emplace_back(std::string() + "alpha");
    param_names__.emplace_back(std::string() + "sigma");
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= f_predict_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "f_predict" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_predict; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_predict" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_predict; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "dy_predict" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_predict; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "doubling_time" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"rho\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"f_predict\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(f_predict_1dim__) + "},\"block\":\"generated_quantities\"},{\"name\":\"y_predict\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_predict) + "},\"block\":\"generated_quantities\"},{\"name\":\"dy_predict\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_predict) + "},\"block\":\"generated_quantities\"},{\"name\":\"doubling_time\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_predict) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"rho\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"f_predict\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(f_predict_1dim__) + "},\"block\":\"generated_quantities\"},{\"name\":\"y_predict\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_predict) + "},\"block\":\"generated_quantities\"},{\"name\":\"dy_predict\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_predict) + "},\"block\":\"generated_quantities\"},{\"name\":\"doubling_time\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_predict) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((1 + 1) + 1);
      const size_t num_transformed = 0;
      const size_t num_gen_quantities = 
  (((f_predict_1dim__ + N_predict) + N_predict) + N_predict);
      std::vector<double> vars_vec(num_params__
       + (emit_transformed_parameters * num_transformed)
       + (emit_generated_quantities * num_gen_quantities));
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((1 + 1) + 1);
      const size_t num_transformed = 0;
      const size_t num_gen_quantities = 
  (((f_predict_1dim__ + N_predict) + N_predict) + N_predict);
      vars.resize(num_params__
        + (emit_transformed_parameters * num_transformed)
        + (emit_generated_quantities * num_gen_quantities));
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 3> names__{"rho", "alpha", "sigma"};
      const std::array<Eigen::Index, 3> constrain_param_sizes__{1, 1, 1};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
     }; } 
using stan_model = gp_growth_rate_prior_deriv_model_namespace::gp_growth_rate_prior_deriv_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return gp_growth_rate_prior_deriv_model_namespace::profiles__;
}

#endif


